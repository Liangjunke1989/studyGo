package main

import "fmt"

func main() {
	/*
		值类型：
			int/float/bool/数组，string在go中是值类型。
		引用类型：
			传递的是内存地址。
	*/
	fmt.Println("----------------01字符串类型赋值和传值--------------------------------")
	{
		m := "aaa"
		fmt.Println("m1的值为", m)
		fmt.Printf("m1的内存地址为：%p\n", m) //string为值类型，没有开辟内存地址
		n := m                         //此时将m的值作为副本进行了拷贝，对m任何没有影响
		//m ="bbb"
		//fmt.Println("m2的值为",m)
		//fmt.Printf("m2的内存地址为：%p\n",m)
		//fmt.Println("n的值为",n)
		//fmt.Printf("n的内存地址为：%p\n",m)
		n = "bbb" //值类型
		fmt.Println(m, n)
	}

	fmt.Println("----------------02数组类型赋值和传值----------------------------------")
	{
		arr1 := [4]int{1, 2, 3, 4}
		arr2 := arr1 //值类型特点，值作为副本
		arr2[1] = 99
		fmt.Println(arr1, arr2)
	}

	fmt.Println("----------------03切片类型赋值和传值----------------------------------")
	{
		s1 := []int{1, 2, 3, 4} //开辟一块内存，存储切片类型的数据
		fmt.Printf("s1的内存地址为：%p\n", s1)
		s2 := s1   //此时，多个变量指向了同一块内存地址
		s2[1] = 98 //更改了同一块内存地址的内容
		fmt.Printf("s2的内存地址为：%p\n", s2)
		fmt.Println("同一块内存地址的内容做了更改：", s1, s2) //表现出，值都发生改变
		s2 = append(s1, 5, 23, 4, 2, 3)        //开辟了一块新的内存地址
		s2[1] = 12                             //修改了新的内存地址中的内容（此时修改没有修改到s1的原始内存地址的数据）
		fmt.Printf("s2的内存地址为：%p\n", s2)
		fmt.Println(s1, s2) //结果只对新的内存地址的内容发生变化，旧的内存地址的内容没变！
	}
}
