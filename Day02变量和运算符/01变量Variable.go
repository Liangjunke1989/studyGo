package main

import "fmt"

func main() {
	/*变量的使用：
	概念：本质上就是一块小内存，用于存储数据，程序运行中，该值可以改变（声明变量开辟内存，变量名不能冲突）
	使用：
		声明，也叫定义
			语法一: var 变量名 数据类型
	               变量名 = 数值
			语法二: 简化写法
	               var 变量名 数据类型 = 数值
			语法三: 省略var，注意 :=左侧的变量不应该是已经声明过的（多个变量同时声明时，至少保证一个是新变量),否则会导致编译错误
	    访问
	        变量名
			变量类型
			变量的数值
			变量的地址——指针
	*/
	//1.定义变量并访问
	var age2 int = 32
	fmt.Println("其实现在年龄已经有", age2, "岁了")
	/*
			%d、%b、%o、%x:十进制、二进制、八进制、十六进制

			%d:格式化一个整数
		    %s:格式化一个字符串
			%t:格式化一个bool类型

		    %T:格式化数值的类型

	*/
	var age int
	age = 30
	fmt.Printf("年龄有%d岁！年龄的类型是：%T \n", age, age) //访问变量

	var name = "ljk" //类型推断,根据数值，推断该变量的数据类型
	fmt.Println("我的名字叫：", name)
	fmt.Printf("变量的数值是：%s,变量的类型是：%T\n", name, name)

	//简短声明
	name1 := "koko"
	fmt.Println("第二姓名是：", name1)
	fmt.Printf("变量的类型是%T,变量的数值是%s\n", name1, name1)

	//更改变量的数值
	name1 = "dk"
	fmt.Println("新的名字为：", name1)

	//多个变量赋值
	a, b, f := 5, 4, "3" //简化写法  :=含义是声明变量，:=至少有一个新的变量
	fmt.Printf("%T,%s\n", f, f)
	fmt.Printf("%T,%d,%T,%d\n", a, a, b, b)

	//变量的注意事项：
	//1.go语言是强类型的语言（静态语言），要保证变量的类型和赋值的类型一致

	//2.变量的默认值(变量的零值)
	//int类型的默认值为0，float类型的默认值为0.0,string类型的默认值 ""，此时注意""，null和空的区别

	//3.简短定义声明注意,省略var,但不能全局使用
	a1 := 100 //函数内部，作为局部变量，不能在函数的外部。外部使用的话，不要使用简短声明
	fmt.Println(a1)
	//4.变量的集合，声明多个变量
	var (
		age10  = 100
		name10 = "ljk"
		sex10  = "男"
	)
	fmt.Println("年龄:", age10, "姓名:", name10, "性别:", sex10)

	//5.舍弃变量(go语言中：_表示舍弃数值，函数返回值中使用)
	_, num := 1, 2
	fmt.Println(num)

	//6.go语言定义变量必须使用

	//格式化:cmd+option+L/ctrl+alt+L
	//复制一行:ctrl+d
	//删除一行:ctrl+x
	//移动一行:alt+Shirft+光标上下
}
