package main

import "fmt"

func main() {
	fmt.Println("————————————————运算符——————————————————")
	a := 1
	b := 7
	mul := a * b //积
	div := a / b //商
	mod := a % b //模，余数
	fmt.Printf("b除以a结果为 %d\n", mul)
	fmt.Printf("b除以a结果为 %d\n", div)
	fmt.Printf("b除以a结果为 %d\n", mod)

	fmt.Println("————————————————位运算符——————————————————")
	/*
		位运算符：
			将数值转为二进制后，按位操作
			按位&、按位｜、异或
	*/
	c := 60
	d := 13
	//60转成二进制为：11 1100
	//13转成二进制为：00 1101

	//按位与运算c&d： 00 1100
	//按位或运算c|d: 11 1101
	//异或c^d:      11 0001
	fmt.Printf("%d,%b\n", c, c)
	fmt.Printf("%d,%b\n", d, d)
	res01 := c & d //按位与,逻辑且。  位的值如果都为1才为1，其他为0
	res02 := c | d //按位或,逻辑或。  位的值如果有一个位为1，则为1
	res03 := c ^ d //异或。          位的值不同则为：1，相同为：0————注意
	fmt.Println(res01)
	fmt.Printf("%d,%b\n", res01, res01)
	fmt.Printf("%d,%b\n", res02, res02)
	fmt.Printf("%d,%b\n", res03, res03)

	fmt.Println("————————————————位移运算符——————————————————")
	/*
		位移运算符：
			<<: 按位左移
				a<<b,   将a转成二进制,向左移动b个位
			>>: 按位右移
				a>>b,   将a转成二进制,向右移动b个位
	*/
	fmt.Println("—————位移前的十进制与二进制转换数值———————")
	e := 33 //33转成二进制为：100001
	f := 12 //12转成二进制为：1100
	fmt.Printf("%d,%b\n", e, e)
	fmt.Printf("%d,%b\n", f, f)
	fmt.Println("—————————位移的结果———————————")
	res04 := e << 2 //左移，数值变大
	//100001
	//10000100 结果：向左移动两位，不够补零
	res05 := f >> 2 //右移，数值变小
	//1100
	//  11     结果：向右移动三位，不够补零
	fmt.Printf("e:33左移两位，结果变大，变为：%d, 二进制为：%b\n", res04, res04)
	fmt.Printf("f:12右移两位，结果变小，变为：%d, 二进制为：%b\n", res05, res05)
	//位移动，运算速度最快！！
}
